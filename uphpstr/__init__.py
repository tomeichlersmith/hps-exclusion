import uproot
import hist


class hpstrHistFile :
    """A file of histograms generated by hpstr
    
    hpstr produces a file of histograms with a formulaic structure.
    
    Parmaeters
    ----------
    fp : str
        File path to hist file
    analysis : str
        Name of analysis in hist file (name given to HistoManager)
    """
    lumi = 10.7 # 1/pb
    
    def __init__(self, fp, analysis, nfiles = 1, nevents_per_file = 1, xsec = 1) :
        self.__analysis_dir = uproot.open(f'{fp}:{analysis}')
        self._analysis = analysis
        self._nfiles = nfiles
        self._nevents_per_file = nevents_per_file
        self._xsec = xsec
        self._scale = self._xsec / (self._nfiles*self._nevents_per_file)
        
    
    def __construct_key(self,hist_name,*,include_prefix=True) :
        """Get a histogram from this analysis
        
        Parameters
        ----------
        hist_name : str
            Name of histogram including dimensionality extension
        include_prefix : bool
            Include the analysis name prefix defined by HistoManager
        """
        key = []
        if include_prefix :
            key.append(self._analysis)
        key.append(hist_name)
        return '_'.join(key)
            
    def get(self, *args, scale = 'lumi', **kwargs) :
        """Get a histogram from this analysis
        
        All args and kwargs are forwarded to __construct_key
        """
        k = self.__construct_key(*args,**kwargs)
        h = self.__analysis_dir[k].to_hist()
        if not scale:
            return h
        if scale == 'lumi':
            return (h * hpstrHistFile.lumi * self._scale / np.sum(h.axes[0].widths))
        elif scale == 'density':
            return (h / h.axes[0].widths)
        else:
            raise ValueError(f'Unrecognized scale {scale}')
